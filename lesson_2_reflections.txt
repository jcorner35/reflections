What happens when you initialize a repository? Why do you need to do it?

When a new repository is initialized it changes the directory from a normal folder into a git repository.
Hidden files containing git meta-data are created. These files allow other git commands, such as git commit to be performed on the directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area allows the user to specify which modified files should be part of a commit.
This allows the user to separate modified files into logical commits, rather than committing unrealated files together.
The staging area contains a subset of the files in the working directory, those that have been modified and selected to be committed.
The staging area is different from the repository in that the staging area alone does not allow for any of benifits the repository gives you. 
Files must be committed to the repository in order for log, diff and checkout to function.

How can you use the staging area to make sure you have one commit per logical change?

By using git diff we can see the changes that we are ready to commit.
This allows us to ensure that all the changes are part of the same logical change. If a file is unrelated, we can see this using git diff.
The staging area allows us to add only the files we want to the commit.
Combined with git diff we can ensure that only the changes we want are committed.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

There are many situtations where branches will help in keeping a history orgranized.
The most obvious is when there are two unrelated features being worked on simulataneously.
Should we do this in only one branch, the log would contain check-ins from both features. And would make reading the history more difficult.
Splitting the features would allow the history of each to be more easily read and understood.
We can also see when work on a feautre was started and exactly when it was added to the master. This makes keeping track of various features much easier.

How do the diagrams help you visualize the branch structure?

The diagram of the branch structure allows the user to see what branches are where. 
As well we can get a better understanding of when the branches are made and therefore which branches contain which code.
In a complex system, where we may have branches of branches, a diagram is necessary in order to get an idea of the overall layout of the code.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches together results in a single branch that contains the changes from both branches.
The two branches will have a common ancestor, and by building on that ancestor we can incorporate the changes from both brances. Frequently this occurs automatically.
Merging is represented by one node, pointing to two nodes. The one node is the merged branch. The two nodes it points two are the last commits made on each individual branch.
We can think about merging as combining two branches into one. Such as when both branches contain equally significant changes.
Or we can think about merging as merging one branch into another. For example, when merging a feature back into the master.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Merging manually gives total control, but has major downsides. 
1. An automatic merge can usually be done without issue making the manual merge unnceccessary.
2. Manual merges are more error prone.
3. Manual merges are more time consuming. Sometimes far more time consuming in the case of large merges.
It is safe to say that automatic merges will go wrong far less frequently than manual merges, as the rules of when to merge basic and easy to understand.
And due to the nature of git, if there is an issue it is easy to see the what was done during the merge. This makes resolving any issues caused by an automatic merge easy.