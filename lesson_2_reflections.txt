What happens when you initialize a repository? Why do you need to do it?

When a new repository is initialized it changes the directory from a normal folder into a git repository.
Hidden files containing git meta-data are created. These files allow other git commands, such as git commit to be performed on the directory.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area allows the user to specify which modified files should be part of a commit.
This allows the user to separate modified files into logical commits, rather than committing unrealated files together.
The staging area contains a subset of the files in the working directory, those that have been modified and selected to be committed.
The staging area is different from the repository in that the staging area alone does not allow for any of benifits the repository gives you. 
Files must be committed to the repository in order for log, diff and checkout to function.

How can you use the staging area to make sure you have one commit per logical change?

By using git diff we can see the changes that we are ready to commit.
This allows us to ensure that all the changes are part of the same logical change. If a file is unrelated, we can see this using git diff.
The staging area allows us to add only the files we want to the commit.
Combined with git diff we can ensure that only the changes we want are committed.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

There are many situtations where branches will help in keeping a history orgranized.
The most obvious is when there are two unrelated features being worked on simulataneously.
Should we do this in only one branch, the log would contain check-ins from both features. And would make reading the history more difficult.
Splitting the features would allow the history of each to be more easily read and understood.
We can also see when work on a feautre was started and exactly when it was added to the master. This makes keeping track of various features much easier.

